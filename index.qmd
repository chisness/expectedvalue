---
title: "The Expected Value Foundation"
execute:
  echo: false
format: html
resources: 
    - CNAME
---
## Welcome! 
We believe that expected value is one of the most important concepts for making better decisions in an uncertain world. Understanding expected value helps us think more clearly about risks, rewards, and tradeoffs.

Nate Silver in *On the Edge*: 

> Society would be generally better off--I'll confidently contend--if people understood the nature of expected value and specifically the importance of low-probability, high-impact events, whether they come in the form of fantastic potential payoffs or catastrophic risks.

## What is expected value?
Expected value (EV) is the average of all possible outcomes. It's computed by adding each possible outcome weighted by its probability of occurring: 

$\text{Expected Value} =  \text{(Probability of each outcome)} \cdot \text{(Value of each outcome)}$

We take the probability times the value for each outcome and sum all of them together. 

In math terms:

$\mathbb{E}[X] = \sum\limits_{i} P(X=x_i) \cdot x_i$

### Drawing a card
Here's a simple card game where you get to draw 1 card and get the prize indicated on that card. 

![](card-game.svg){fig-alt="A visualization showing four playing cards displaying numbers 1, 1, 2, and 3, each with a 1/4 chance of being drawn"}

There are 4 possible outcomes. Note that the probabilities (weights) always sum to 1 because they describe all possible outcomes. 

| Probability | Value |
|------------|-------|
| 1/4        | 1     |
| 1/4        | 1     |
| 1/4        | 2     |
| 1/4        | 3     |

Let's compute the EV: 

$$
\begin{align*}
\mathbb{E}[\text{Draw Card}] &= \frac{1}{4}(1) + \frac{1}{4}(1) + \frac{1}{4}(2) + \frac{1}{4}(3) \\
&= \frac{1}{4} + \frac{1}{4} + \frac{2}{4} + \frac{3}{4} \\
&= \frac{7}{4} \\
&= 1.75
\end{align*}
$$

Therefore the expected value, or average outcome, when drawing a card is **1.75**. 

Note that EV is not a possible outcome (we couldn't actually draw 1.75), but rather summarizes the set of possible outcomes. 

```{ojs}
//| echo: false
import {Inputs} from "@observablehq/inputs"
import {Plot} from "@observablehq/plot"

// Define distinct cards
cards = [
  {value: 1, id: "1a"},
  {value: 1, id: "1b"},
  {value: 2, id: "2"},
  {value: 3, id: "3"}
]

// Expected value
expectedValue = 1.75

// Create individual buttons with proper styling
viewof drawOne = Inputs.button("Draw 1 Card", {
  style: `
    background: black;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
  `
})
viewof drawTen = Inputs.button("Draw 10 Cards", {
  style: `
    background: black;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
  `
})
viewof drawHundred = Inputs.button("Draw 100 Cards", {
  style: `
    background: black;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
  `
})

// Wrap the buttons in a flex container
buttonsContainer = html`
<div style="display: flex; gap: 10px; align-items: center; margin-bottom: 20px;">
  ${viewof drawOne}
  ${viewof drawTen}
  ${viewof drawHundred}
</div>
`

// State management
values = {
  let currentValues = window._cardValues || [];
  
  // Determine the action based on which button was pressed
  let action = null;
  if (drawOne) action = "drawOne";
  if (drawTen) action = "drawTen";
  if (drawHundred) action = "drawHundred";

  if (action === "drawOne") {
    const card = cards[Math.floor(Math.random() * cards.length)];
    currentValues = [...currentValues, card];
  }
  
  if (action === "drawTen") {
    for (let i = 0; i < 10; i++) {
      const card = cards[Math.floor(Math.random() * cards.length)];
      currentValues.push(card);
    }
  }
  
  if (action === "drawHundred") {
    for (let i = 0; i < 100; i++) {
      const card = cards[Math.floor(Math.random() * cards.length)];
      currentValues.push(card);
    }
  }

  window._cardValues = currentValues;
  return currentValues;
}

// Calculate running averages
runningAverages = values.map((_, i) => ({
  x: i + 1,
  y: values.slice(0, i + 1).reduce((a, b) => a + b.value, 0) / (i + 1)
}))

// Compute counts for each card type
cardCounts = values.reduce((acc, card) => {
  acc[card.id] = (acc[card.id] || 0) + 1;
  return acc;
}, {})

// Stats
totalDraws = values.length
currentAverage = runningAverages.length > 0 ? runningAverages[runningAverages.length - 1].y.toFixed(3) : "N/A"

// Create the plot and place a small info box inside
chartContainer = {
  const chart = Plot.plot({
    width: 800,
    height: 400,
    margin: 50,
    grid: true,
    style: {
      fontSize: 12,
      fontFamily: "system-ui, -apple-system"
    },
    y: {
      domain: [0, 4],
      label: "↑ Running Average",
      grid: true
    },
    x: {
      label: "Number of Draws →",
      grid: true
    },
    marks: [
      Plot.line(runningAverages, {
        x: "x", 
        y: "y", 
        stroke: "#2196f3",
        strokeWidth: 1.5
      }),
      Plot.ruleY([expectedValue], {
        stroke: "red", 
        strokeDasharray: "5,5",
        strokeOpacity: 0.5
      }),
      Plot.text([{x: runningAverages.length, y: expectedValue}], {
        text: ["Expected Value (1.75)"],
        dx: 10,
        fill: "red",
        fontSize: 10
      })
    ]
  });
  
  const container = html`<div style="position: relative; width: fit-content;">`;
  container.appendChild(chart);
  
  // Info box overlay
  const infoBox = html`<div style="
    position: absolute; 
    top: 10px; 
    right: 10px; 
    background: rgba(255,255,255,0.9); 
    padding: 5px 10px; 
    border-radius: 3px; 
    font-size: 12px; 
    font-family: system-ui, -apple-system;
    border: 1px solid #ccc;">
    <div><strong>Total draws:</strong> ${totalDraws}</div>
    <div><strong>Current average:</strong> ${currentAverage}</div>
  </div>`;
  
  container.appendChild(infoBox);
  return container;
}

// Compute percentages for each card
percent = (id) => {
  if (totalDraws === 0) return "0%";
  const p = (cardCounts[id] || 0) / totalDraws * 100;
  return p.toFixed(1) + "%";
}

// Get counts (defaulting to 0 if not drawn)
count = (id) => cardCounts[id] || 0

// Show SVG with cards, counts, and percentages on two separate lines
cardsDisplay = {
  const svg = html`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 180">
  <defs>
      <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
          <feGaussianBlur in="SourceAlpha" stdDeviation="2"/>
          <feOffset dx="2" dy="2" result="offsetblur"/>
          <feComponentTransfer>
              <feFuncA type="linear" slope="0.2"/>
          </feComponentTransfer>
          <feMerge>
              <feMergeNode/>
              <feMergeNode in="SourceGraphic"/>
          </feMerge>
      </filter>
      
      <linearGradient id="cardGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1"/>
          <stop offset="100%" style="stop-color:#f8f9fa;stop-opacity:1"/>
      </linearGradient>
      
      <pattern id="cardPattern" x="0" y="0" width="10" height="10" patternUnits="userSpaceOnUse">
          <circle cx="5" cy="5" r="0.5" fill="#e0e0e0"/>
      </pattern>
  </defs>
  
  <!-- Cards Row -->
  <!-- Card 1a -->
  <g transform="translate(50,10)" filter="url(#shadow)">
      <rect x="0" y="0" width="60" height="90" rx="8" fill="url(#cardGradient)" stroke="#2196f3" stroke-width="2"/>
      <rect x="5" y="5" width="50" height="80" rx="6" fill="url(#cardPattern)" fill-opacity="0.1"/>
      <text x="30" y="55" font-family="Arial" font-weight="bold" font-size="28" text-anchor="middle" fill="#e74c3c">1</text>
  </g>
  
  <!-- Card 1b -->
  <g transform="translate(130,10)" filter="url(#shadow)">
      <rect x="0" y="0" width="60" height="90" rx="8" fill="url(#cardGradient)" stroke="#2196f3" stroke-width="2"/>
      <rect x="5" y="5" width="50" height="80" rx="6" fill="url(#cardPattern)" fill-opacity="0.1"/>
      <text x="30" y="55" font-family="Arial" font-weight="bold" font-size="28" text-anchor="middle" fill="#e74c3c">1</text>
  </g>
  
  <!-- Card 2 -->
  <g transform="translate(210,10)" filter="url(#shadow)">
      <rect x="0" y="0" width="60" height="90" rx="8" fill="url(#cardGradient)" stroke="#2196f3" stroke-width="2"/>
      <rect x="5" y="5" width="50" height="80" rx="6" fill="url(#cardPattern)" fill-opacity="0.1"/>
      <text x="30" y="55" font-family="Arial" font-weight="bold" font-size="28" text-anchor="middle" fill="#e74c3c">2</text>
  </g>
  
  <!-- Card 3 -->
  <g transform="translate(290,10)" filter="url(#shadow)">
      <rect x="0" y="0" width="60" height="90" rx="8" fill="url(#cardGradient)" stroke="#2196f3" stroke-width="2"/>
      <rect x="5" y="5" width="50" height="80" rx="6" fill="url(#cardPattern)" fill-opacity="0.1"/>
      <text x="30" y="55" font-family="Arial" font-weight="bold" font-size="28" text-anchor="middle" fill="#e74c3c">3</text>
  </g>
  
  <!-- Probabilities row -->
  <g transform="translate(0,115)">
      <text x="80" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#555555">P = 1/4</text>
      <text x="160" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#555555">P = 1/4</text>
      <text x="240" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#555555">P = 1/4</text>
      <text x="320" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#555555">P = 1/4</text>
  </g>
  
  <!-- Counts and percentages row -->
  <g transform="translate(0,140)">
    <!-- Counts line -->
    <text x="80"  y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      Count: ${count("1a")}
    </text>
    <text x="160" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      Count: ${count("1b")}
    </text>
    <text x="240" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      Count: ${count("2")}
    </text>
    <text x="320" y="0" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      Count: ${count("3")}
    </text>
    
    <!-- Percentages line (20px below the counts) -->
    <text x="80"  y="20" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      ${percent("1a")}
    </text>
    <text x="160" y="20" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      ${percent("1b")}
    </text>
    <text x="240" y="20" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      ${percent("2")}
    </text>
    <text x="320" y="20" font-family="Arial" font-size="14" text-anchor="middle" fill="#333333">
      ${percent("3")}
    </text>
  </g>
</svg>`;
  return svg;
}

// Finally, display everything
html`
${buttonsContainer}
${chartContainer}
${cardsDisplay}
`
```

### Buying ice cream

**Suppose that you are buying an ice cream:**

The store is selling an ice cream cone for **$7**. 

They also have a special offer: 

- Flip a coin
- If the coin is **heads**, you buy the ice cream for **$10**
- If the coin is **tails**, you get the ice cream for **free**

interactive

**What is the expected value of the coin flip?**

1. What is the probability of each outcome? Heads and tails are both 50% likely. 

2. What is the value of each outcome? The cost for heads is $10 and the cost for tails is $0. 

3. The expected value of the coin flip is as follows, where $P$ represents probability and $V$ represents value.

$$
\begin{aligned}
\text{EV} &= P(\text{Heads}) \cdot V(\text{Heads}) + P(\text{Tails}) \cdot V(\text{Tails}) \\
   &= (0.5) \cdot (\$10) + (0.5) \cdot (\$0) \\
   &= \$5
\end{aligned}
$$

This means that the *expected value* of the coin flip is **$5**, a better deal than the standard price of **$7**. 

The EV calculation helps make decisions by providing a framework to evaluate options with uncertain outcomes. In most cases, the better expected value means that that is the better decision, and we should therefore **take the coin flip option**. 

But not always. There are other considerations like risk tolerance (some prefer a guaranteed price of $7 to chancing a price of $10), resource constraints ($10 could be a large strain on the budget), and others. 

## What we do
- [EV Tutorial (this website)](tutorial/): Learn about expected value through our tutorial and interactive examples
- [EV Workshops](workshops/): In-person workshops on expected value
- [EV Day](evday2025/): A day of EV-centric and adjacent workshops, along with a charity poker tournament
- [Poker Camp](https://poker.camp): Workshops and courses on AI and applied rationality through the lens of poker
- [EV Fellowship](fellows.qmd): Contribute your strengths to the EVF in areas like research, coding, writing, logistics, running workshops, and creating videos

![EV workshop at Ecole les Hirondelles Mermoz in Dakar, Senegal (December, 2024)](assets/dakar1.jpg){width=75%}