---
title: "Expected Value: From Simple to Advanced"
format: html
resources: 
    - CNAME
---
## What is expected value?
\text{Expected Value} = \text{(Probability of an outcome)} × (Value of that outcome)

Imagine a raffle where:

- You buy 1 ticket for $1
- There is a 1 in 100 chance of winning
- The prize is $150

To calculate the expected value:

- Probability of winning: 1/100 = 0.01
- Value of winning: $150
- Expected Value = 0.01 × $150 = $1.50

This means that, on average, each ticket is "worth" $1.50.

Since the ticket costs $1, and its expected value is $1.50, it's a good deal in the long run. However, remember that this doesn't guarantee you'll win - it's an average over many tries.

This simple calculation helps you make decisions by weighing the likelihood of outcomes against their potential value. It's a basic tool for comparing options with different risks and rewards.

According to [Wikipedia](https://en.wikipedia.org/wiki/Expected_value): "The expected value of a random variable with a finite number of outcomes is a weighted average of all possible outcomes". 

## Explain It Like I'm 5
Imagine you have a big jar of different colored marbles. Some are red, some are blue, and some are green. Your friend says, "If you pick a red marble, I'll give you a cookie. If you pick a blue one, I'll give you two cookies. If you pick a green one, you don't get any cookies."

Now, let's say there are:

- 5 red marbles
- 3 blue marbles
- 2 green marbles

If you reach into the jar without looking, what can you expect? This is what we call "expected value." It's like guessing how many cookies you might get on average if you played this game many, many times.

Let's count it out. On average if you reach into the jar 10 times (assume that each time the jar resets to the original marble quantities):

Red marbles give you 5 cookies (1 cookie × 5 marbles)
Blue marbles give you 6 cookies (2 cookies × 3 marbles)
Green marbles give you 0 cookies (0 cookies × 2 marbles)

That's 11 cookies in total. 

So, if we divide 11 cookies by 10 marbles, we get 1.1 cookies. 

This means, on average, you can expect to get about 1 cookie (and a tiny bit more) each time you pick a marble!

::: {.callout-tip}
## Try it yourself!

Imagine reaching into the jar 10 times. How many cookies do you think you'd get? Try it out and see. 
:::

```{=html}
<div id="marble-picker">
<div id="marble-picker">
  <p>Cookies: <span id="cookie-count">0</span></p>
  <p>Picks: <span id="pick-count">0</span></p>
  <p>Average: <span id="average">0</span> cookies per pick</p>
  <button id="pick-button">Pick a Marble</button>
  <button id="reset-button">Reset</button>
  <p>Last picked: <span id="last-picked">None</span></p>
  <div id="marble-history"></div>
</div>

<style>
  .marble {
    display: inline-block;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    margin: 2px;
  }
  .red { background-color: red; }
  .blue { background-color: blue; }
  .green { background-color: green; }
</style>

<script>
  const cookieCount = document.getElementById('cookie-count');
  const pickCount = document.getElementById('pick-count');
  const average = document.getElementById('average');
  const pickButton = document.getElementById('pick-button');
  const resetButton = document.getElementById('reset-button');
  const lastPicked = document.getElementById('last-picked');
  const marbleHistory = document.getElementById('marble-history');

  let cookies = 0;
  let picks = 0;

  pickButton.addEventListener('click', () => {
    const random = Math.random();
    let marbleColor, cookiesWon;
    
    if (random < 0.5) {
      marbleColor = 'red';
      cookiesWon = 1;
    } else if (random < 0.8) {
      marbleColor = 'blue';
      cookiesWon = 2;
    } else {
      marbleColor = 'green';
      cookiesWon = 0;
    }
    
    cookies += cookiesWon;
    picks += 1;
    
    lastPicked.textContent = `${marbleColor} (${cookiesWon} cookie${cookiesWon !== 1 ? 's' : ''})`;
    lastPicked.style.color = marbleColor;
    
    const marble = document.createElement('div');
    marble.className = `marble ${marbleColor}`;
    marbleHistory.prepend(marble);
    
    updateDisplay();
  });

  resetButton.addEventListener('click', () => {
    cookies = 0;
    picks = 0;
    lastPicked.textContent = 'None';
    lastPicked.style.color = 'black';
    marbleHistory.innerHTML = '';
    updateDisplay();
  });

  function updateDisplay() {
    cookieCount.textContent = cookies;
    pickCount.textContent = picks;
    average.textContent = picks > 0 ? (cookies / picks).toFixed(2) : '0';
  }
</script>
</div>
```

## Mathematical Explanation

Expected value is a concept in probability theory that represents the average outcome of an experiment if it is repeated many times. It's calculated by multiplying each possible outcome by its probability of occurrence and then summing these products.

Mathematically, for a discrete random variable $X$ with possible values $x_1, x_2, ..., x_n$ and corresponding probabilities $p_1, p_2, ..., p_n$, the expected value $E(X)$ is:

$\mathbb{E}[X] = \sum_{i=1}^n x_i p_i = x_1 p_1 + x_2 p_2 + ... + x_k p_k$

What is a random variable? It represents possible outcomes. A random variable is defined by its possible outcomes and the probability of each outcome. 

Let's go back to the marble example:

- Red marble (1 cookie): 5/10 probability
- Blue marble (2 cookies): 3/10 probability
- Green marble (0 cookies): 2/10 probability

$ E(X) = 1 \cdot \frac{5}{10} + 2 \cdot \frac{3}{10} + 0 \cdot \frac{2}{10} = 0.5 + 0.6 + 0 = 1.1 $

So, on average, you can expect to get 1.1 cookies per draw.

::: {.callout-tip}
## Try it yourself!

You can use this tool to calculate any expected value. Just put the probabilities in the left column and the values in the right column. It's pre-set with the cookie marble experiment. Remember that probabilities must sum to 1. 

Thinking about something else to try? How about a 6-sided die? Each probability is 1/6 and the values are the 6 different die values. 
:::

```{=html}
<div id="ev-calculator">
<div id="ev-calculator">
  <div id="inputs">
    <div class="input-headers">
      <span>Probability</span>
      <span>Value</span>
    </div>
    <div id="input-rows"></div>
  </div>
  <button id="add-row">Add Row</button>
  <button id="calculate">Calculate</button>
  <p>Expected Value: <span id="expected-value">0</span></p>
  <p id="error-message" style="color: red;"></p>
</div>

<style>
  #ev-calculator {
    font-family: Arial, sans-serif;
    max-width: 400px;
    margin: 20px auto;
  }
  .input-headers {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    font-weight: bold;
  }
  .input-headers span {
    width: 45%;
  }
  .input-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
  }
  .input-row input {
    width: 40%;
  }
  button {
    margin-right: 10px;
  }
</style>

<script>
  const inputRows = document.getElementById('input-rows');
  const addRowButton = document.getElementById('add-row');
  const calculateButton = document.getElementById('calculate');
  const expectedValueSpan = document.getElementById('expected-value');
  const errorMessage = document.getElementById('error-message');

  let inputs = [
    { probability: 0.5, value: 1 },
    { probability: 0.3, value: 2 },
    { probability: 0.2, value: 0 },
  ];

  function renderInputs() {
    inputRows.innerHTML = '';
    inputs.forEach((input, index) => {
      const row = document.createElement('div');
      row.className = 'input-row';
      row.innerHTML = `
        <input type="number" placeholder="Probability" value="${input.probability}" step="0.01" min="0" max="1"
               onchange="updateInput(${index}, 'probability', this.value)">
        <input type="number" placeholder="Value" value="${input.value}" 
               onchange="updateInput(${index}, 'value', this.value)">
        <button onclick="removeRow(${index})">Remove</button>
      `;
      inputRows.appendChild(row);
    });
  }

  function updateInput(index, field, value) {
    inputs[index][field] = parseFloat(value) || 0;
  }

  function addRow() {
    inputs.push({ probability: 0, value: 0 });
    renderInputs();
  }

  function removeRow(index) {
    inputs = inputs.filter((_, i) => i !== index);
    renderInputs();
  }

  function calculateEV() {
    const totalProbability = inputs.reduce((sum, { probability }) => sum + probability, 0);
    
    if (Math.abs(totalProbability - 1) > 0.0001) {  // Allow for small floating-point errors
      errorMessage.textContent = `Error: Probabilities must sum to 1. Current sum: ${totalProbability.toFixed(4)}`;
      expectedValueSpan.textContent = 'N/A';
    } else {
      errorMessage.textContent = '';
      const ev = inputs.reduce((sum, { probability, value }) => sum + probability * value, 0);
      expectedValueSpan.textContent = ev.toFixed(2);
    }
  }

  addRowButton.addEventListener('click', addRow);
  calculateButton.addEventListener('click', calculateEV);

  renderInputs();
</script>
</div>
```

## Advanced Explanation

In more complex scenarios, expected value becomes a powerful tool for decision-making under uncertainty. It's particularly useful in fields like finance, economics, and data science. We give a bunch of examples on this site on the left nav menu. 

For continuous random variables, the expected value is defined as an integral:

$$ E(X) = \int_{-\infty}^{\infty} x f(x) dx $$

where $f(x)$ is the probability density function of $X$.

Expected value has several important properties:

1. Linearity: $E(aX + bY) = aE(X) + bE(Y)$ for constants $a$ and $b$
2. Law of the unconscious statistician: $E[g(X)] = \int_{-\infty}^{\infty} g(x) f(x) dx$

In decision theory, we often use expected utility instead of expected value. This takes into account the decision-maker's risk preferences:

$$ EU(X) = \sum_{i=1}^n U(x_i) p_i $$

where $U(x)$ is the utility function.

::: {.callout-warning}
## Important Consideration

While expected value is a useful tool, it doesn't account for the variance or risk associated with different outcomes. In some cases, especially with non-linear utility functions or when dealing with rare, high-impact events, decisions based solely on expected value may lead to suboptimal results.
:::